-- Pizza Sales data analysis
-- Skills used: group by clause, Joins, CTE, Window functions

-- Q1 Retrieve the total number of orders placed.
select count(*) total_orders from orders;

-- Q2 Calculate the total revenue generated from pizza sales.
SELECT 
    ROUND(SUM(o.quantity * p.price), 2) total_sales
FROM
    order_details o
        JOIN
    pizzas p ON p.pizza_id = o.pizza_id;
    
--  Q3 Identify the highest-priced pizza.
SELECT 
    pt.name Highest_priced_pizza, p.price
FROM
    pizzas p
        JOIN
    pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
ORDER BY p.price DESC
LIMIT 1;

-- Q4 Identify the most common pizza size ordered.
SELECT 
    COUNT(*), p.size
FROM
    order_details o
        JOIN
    pizzas p ON o.pizza_id = p.pizza_id
GROUP BY p.size
ORDER BY COUNT(*) DESC
LIMIT 1;

-- Q5 List the top 5 most ordered pizza types along with their quantities
SELECT 
    pt.name, SUM(o.quantity)
FROM
    order_details o
        JOIN
    pizzas p ON o.pizza_id = p.pizza_id
        JOIN
    pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
GROUP BY pt.name
ORDER BY SUM(o.quantity) DESC
LIMIT 5;  

-- Q6 Determine the distribution of orders by hour of the day.
SELECT 
    HOUR(o.order_time), COUNT(order_id)
FROM
    orders o
GROUP BY HOUR(o.order_time)
order by count(order_id) desc;  

-- Q7 Join the necessary tables to find the total quantity of each pizza category ordered.
SELECT 
    pt.category, SUM(o.quantity)
FROM
    order_details o
        JOIN
    pizzas p ON o.pizza_id = p.pizza_id
        JOIN
    pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
GROUP BY pt.category; 

-- Q9 Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    ROUND(AVG(d.qty_sum), 0) avg_pizza_per_Day
FROM
    (SELECT 
        order_date, SUM(quantity) qty_sum
    FROM
        orders o
    JOIN order_details od ON o.order_id = od.order_id
    GROUP BY order_date) d;
    
-- Q10 Determine the top 3 most ordered pizza types based on revenue.
select pt.name, sum(od.quantity*p.price) revenue from order_details od join pizzas p on od.pizza_id = p.pizza_id
join pizza_types pt on pt.pizza_type_id = p.pizza_type_id
group by pt.name
order by revenue desc
limit 3;

-- Q11 Calculate the percentage contribution of each pizza type to total revenue.
-- method 1:
SELECT 
    pt.category,
    round((SUM(od.quantity * p.price) / (SELECT 
            ROUND(SUM(o.quantity * p.price), 2) total_sales
        FROM
            order_details o
                JOIN
            pizzas p ON p.pizza_id = o.pizza_id)) * 100,2) revenue
FROM
    order_details od
        JOIN
    pizzas p ON od.pizza_id = p.pizza_id
        JOIN
    pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
GROUP BY pt.category;

-- method 2 using CTE
with cte(total_sales) as (SELECT 
            ROUND(SUM(o.quantity * p.price), 2) total_sales
        FROM
            order_details o
                JOIN
            pizzas p ON p.pizza_id = o.pizza_id)
            
SELECT 
    c.category, ROUND(c.revenue / total_sales, 2)
FROM
    (SELECT 
        pt.category, (SUM(od.quantity * p.price)) * 100 revenue
    FROM
        order_details od
    JOIN pizzas p ON od.pizza_id = p.pizza_id
    JOIN pizza_types pt ON pt.pizza_type_id = p.pizza_type_id
    GROUP BY pt.category) c,
    cte;
    
-- Q12 Analyze the cumulative revenue generated over time.
select 
	t.order_date, sum(t.revenue) over(order by t.order_date) as cum_revenue 
from (SELECT 
    o.order_date, SUM(od.quantity * p.price) revenue
FROM
    order_details od
        JOIN
    pizzas p ON od.pizza_id = p.pizza_id
        JOIN
    orders o ON o.order_id = od.order_id
GROUP BY o.order_date) t;
    
-- Q13 Determine the top 3 most ordered pizza types based on revenue for each pizza category.
select category, name, revenue from
(select a.category, a.name, a.revenue, rank() over(partition by category order by revenue desc) as rn from 
(SELECT 
    pt.name, category, sum(od.quantity*p.price) revenue
FROM
    order_details od
        JOIN
    pizzas p ON od.pizza_id = p.pizza_id
        JOIN
    pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
    group by pt.name, category) a) b
    where rn<=3;
    
            